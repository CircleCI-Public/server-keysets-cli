version: "2.1"

workflows:
  test-and-build:
    jobs:
      - test
      - build
      - vulnerability-scan:
          context: org-global-employees
      - publish:
          context: server-keyset
          requires:
            - build
          filters:
            branches:
              only: master

executors:
  lein:
    docker:
      - image: circleci/clojure:openjdk-8-lein-2.9.8

commands:
  restore-cache:
    steps:
      - restore_cache:
          keys:
            - v1-m2-{{ checksum "project.clj" }}
            - v1-m2-
  save-cache:
    steps:
      - save_cache:
          key: v1-m2-{{ checksum "project.clj" }}
          paths:
            - ~/.m2
  cache-graalvm-tools:
    steps:
      - save_cache:
          key: graalvm-ce-20.1
          paths:
            - ~/graalvm
  restore-graalvm-tools:
    steps:
      - restore_cache:
          keys:
            - graalvm-ce-20.1
  install-graalvm-tools:
    steps:
      - run: |
          cd $HOME
          if [ -d graalvm ]; then
            echo "graalvm tools already installed"
            exit 0
          fi

          echo "installing graalvm tools"
          curl --location --remote-name https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.1.0/graalvm-ce-java8-linux-amd64-20.1.0.tar.gz
          if (echo "4fac212b37cd548831fd6587dd4d59dc068068815aa20323b47fde9529d6bb6e  graalvm-ce-java8-linux-amd64-20.1.0.tar.gz" | sha256sum -c); then
            tar xzf graalvm-ce-java8-linux-amd64-20.1.0.tar.gz
            mv graalvm-ce-java8-20.1.0 graalvm
          else
            echo "Failed shasum check"
            exit 1
          fi
      - run: echo "export PATH=${PATH}:${HOME}/graalvm/bin" >> ${BASH_ENV}
      - run: gu install native-image
      - run:
          name: Update ld.so.conf
          command: |
            echo "$HOME/graalvm/jre/lib/amd64" | sudo tee /etc/ld.so.conf.d/graalvm.conf
            sudo ldconfig

jobs:
  test:
    executor: lein
    environment:
      CIRCLE_PIPELINE_NUMBER: << pipeline.number >>
    steps:
      - checkout
      - restore-cache
      - run: lein deps
      - save-cache
      - run: lein test

  vulnerability-scan:
    docker:
        - image: cimg/openjdk:19.0
    steps:
        - checkout
        - run:
            name: Setup Scanning
            command: |
                if [ ! -f "project.clj" ]; then
                  echo "→ No project.clj found, skipping"
                  exit 0
                fi
                echo -e "→ Installing the Snyk CLI"
                curl --progress-bar --retry 6 -L https://static.snyk.io/cli/latest/snyk-linux -o ~/bin/snyk && chmod +x ~/bin/snyk
                echo "→ Installing Lein"
                curl --progress-bar --retry 6 -L https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein -o ~/bin/lein && chmod +x ~/bin/lein
                echo "→ Generating pom.xml file..."
                lein pom
                echo "→ Setup extra environment variables"
                echo "export BASE_BRANCH=$(git log --pretty=format:'%D' HEAD^ | grep 'origin/' | head -n1 | sed 's@origin/@@' | sed 's@,.*@@')" >> "$BASH_ENV"
                git config --global url."https://$GITHUB_USER:$GITHUB_TOKEN@github.com/circleci/".insteadOf "https://github.com/circleci/"
        - run:
            name: Run Snyk CLI
            command: |
                if [ ! -f "project.clj" ]; then
                  echo "→ No project.clj found, skipping"
                  exit 0
                fi
                echo "→ Debugging environment variables"
                echo "CIRCLE_BRANCH value = |$CIRCLE_BRANCH|"
                echo "BASE_BRANCH value   = |$BASE_BRANCH|"
                [[ "$CIRCLE_BRANCH" == "$BASE_BRANCH" ]] && echo "Branch & Base Equal" || echo "Branch & Base Not equal"
                if [[ "$CIRCLE_BRANCH" == "$BASE_BRANCH" ]]; then
                    echo "→ Running Snyk CLI against $BASE_BRANCH and uploading results"
                    snyk monitor --project-name="CircleCI-Public/$CIRCLE_PROJECT_REPONAME:pom.xml" --org="circleci-public" --file="pom.xml" --package-manager="maven"
                else
                    echo "→ Running Snyk CLI against branch $CIRCLE_BRANCH and displaying results"
                    snyk test --severity-threshold=high --file='pom.xml'
                fi

  build:
    executor: lein
    environment:
      CIRCLE_PIPELINE_NUMBER: << pipeline.number >>
      JAVA_HOME: ~/graalvm
    steps:
      - checkout
      - restore-cache
      - restore-graalvm-tools
      - install-graalvm-tools
      - cache-graalvm-tools
      - run:
          name: Install gcc
          command: |
            sudo apt-get update
            sudo apt-get install -y gcc zlib1g-dev
      - run: lein uberjar
      - run: lein generate-assisted-configuration
      - run: lein native
      - store_artifacts:
          path: target/server-keysets
      - persist_to_workspace:
          root: target
          paths:
            - server-keysets

  publish:
    docker:
      - image: cimg/python:3.8
    environment:
      CIRCLE_PIPELINE_NUMBER: << pipeline.number >>
    steps:
      - checkout
      - attach_workspace:
          at: target
      - setup_remote_docker
      - run:
          name: build docker
          command: |
            docker build . -t circleci/server-keysets:latest
            docker tag circleci/server-keysets:latest circleci/server-keysets:v1.0-${CIRCLE_PIPELINE_NUMBER}-$(git rev-parse --short HEAD)
      - run: docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
      - run:
          name: publish docker container
          command: |
            docker push circleci/server-keysets:latest
            docker push circleci/server-keysets:v1.0-${CIRCLE_PIPELINE_NUMBER}-$(git rev-parse --short HEAD)
